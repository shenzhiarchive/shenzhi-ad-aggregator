buildscript {
  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['AdAggregator_' + name]
  }

  repositories {
    google()
    mavenCentral()
    maven {
      url "https://artifact.bytedance.com/repository/pangle"  //穿山甲融合SDK依赖
    }
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.7.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
    //Gromore自动拉取 Adapter AAR 插件脚本
    classpath 'com.pangle.cn:mediation-auto-adapter:1.0.3'
  }
}


apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "mediation-auto-adapter"

apply plugin: "com.facebook.react"

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["AdAggregator_" + name]).toInteger()
}

android {
  namespace "com.shenzhi.adaggregator"

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    debug {
      // Debug构建类型配置
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      java.srcDirs += [
        "generated/java",
        "generated/jni"
      ]
    }
  }
}

repositories {
  mavenCentral()
  google()
  maven {
    url "https://artifact.bytedance.com/repository/pangle"  //穿山甲融合SDK依赖
  }
  flatDir {
    dirs 'libs', 'libs/adapter', 'libs/adn'  //本地aar文件目录
  }
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  implementation "com.facebook.react:react-android"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  
  //穿山甲SDK必需依赖
  implementation 'com.squareup.okhttp3:okhttp:3.12.1'
  
  //穿山甲融合SDK（Maven方式，官方推荐方式一）
  implementation 'com.pangle.cn:mediation-sdk:7.2.0.9'
  
  //穿山甲测试工具（仅在Debug构建中包含，Release构建自动排除）
  //注意：生产环境打包时会自动排除，无需手动配置
  debugImplementation(name: "tools-release", ext: 'aar')
  
  //---------- ADN SDK（本地aar方式，因为不是所有ADN都支持Maven）----------
  //注意：使用api方式声明，既能让mediation-auto-adapter插件识别版本号，
  //又能确保SDK被包含在库中供下游使用
  //---------- GDT 优量汇 ----------
  api(name: "GDTSDK.unionNormal.4.660.1530", ext: 'aar')
  
  //---------- Baidu 百度 ----------
  api(name: "Baidu_MobAds_SDK_v9.423", ext: 'aar')
  
  //---------- KS 快手 ----------
  api(name: "kssdk-ad-4.9.20.1", ext: 'aar')
  
  //---------- Sigmob ----------
  api(name: "windAd-4.24.7", ext: 'aar')
  api(name: "windAd-common-1.8.6", ext: 'aar')
  
  //---------- AdMob ----------
  // AdMob通过Maven方式引入，插件可以直接识别版本号
  api 'com.google.android.gms:play-services-ads:17.2.0'
  
  //注意：Adapter将通过mediation-auto-adapter插件自动拉取匹配版本，无需手动引入
}

//配置自动适配ADN Adapter
mediationAutoAdapter {
  //自动适配所有adn adapter，默认值为true
  autoUpdate true
  
  //配置需要自动适配的adn列表（插件会根据compileOnly声明的SDK版本自动匹配adapter）
  autoUpdateAdn = ["gdt", "baidu", "ks", "admob", "sigmob"]
}
